#!/usr/bin/env python3

import logging
from flask import Flask, request
from flask.logging import default_handler
from dms2021sensor.data.config import SensorConfiguration
from dms2021core.data.rest import RestResponse
from dms2021sensor.presentation.restSensor import RestSensor

app = Flask(__name__)
root_logger = logging.getLogger()
root_logger.addHandler(default_handler)

cfg: SensorConfiguration = SensorConfiguration()
cfg.load_from_file(cfg.default_config_file())
restSensores = RestSensor()

@app.route('/', methods=['GET'])
def is_running():
    return ('', 200, {'Content-Type': 'text/plain'})

@app.route('/sensors/<string:sensorname>/value', methods=['GET'])
def get_valor_sensor(sensorname: str):
    response: RestResponse = restSensores.obtenerRespuestaSensor(sensorname)
    return  (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors/<string:sensorname>', methods = ['POST'])
def set_sensor(sensorname: str):
    type_sensor :str = request.form['sensor_type']
    parameters : str = request.form['parameters']
    response: RestResponse = restSensores.set_sensor(sensorname, type_sensor, parameters)
    return  (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors/<string:sensorname>/new', methods = ['POST'])
def add_sensor(sensorname :str):
    type_sensor :str = request.form['sensor_type']
    parameters : str = request.form['parameters']
    response: RestResponse = restSensores.add_sensor(sensorname, type_sensor, parameters)
    return  (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors/<string:sensorname>', methods = ['DELETE'])
def remove_sensor(sensorname: str):
    response: RestResponse = restSensores.remove_sensor(sensorname)
    return  (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors', methods = ['GET'])
def get_all_sensors():
    response: RestResponse = restSensores.obtenerValoresTodosSensores()
    return (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors/types', methods = ['GET'])
def get_possible_types():
    response : RestResponse = restSensores.get_posibles_tipos()
    return (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.route('/sensors/values', methods = ['GET'])
def get_all_values():
    response : RestResponse  = restSensores.obtenerValoresTodosSensores()
    return (response.get_content(), response.get_code(), {'Content-Type': response.get_mime_type()})

@app.errorhandler(Exception)
def handle_exception(e):
    if cfg.get_debug_flag():
        app.logger.error(str(type(e)))
        app.logger.error(e)
    return ('', 500)


if __name__ == '__main__':
    app.run(
        host=cfg.get_service_host(),
        port=cfg.get_service_port(),
        debug=cfg.get_debug_flag()
    )